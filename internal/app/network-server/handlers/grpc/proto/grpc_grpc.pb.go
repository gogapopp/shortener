// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: grpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultiService_SaveURL_FullMethodName    = "/grpc.MultiService/SaveURL"
	MultiService_GetURL_FullMethodName     = "/grpc.MultiService/GetURL"
	MultiService_Ping_FullMethodName       = "/grpc.MultiService/Ping"
	MultiService_GetURLs_FullMethodName    = "/grpc.MultiService/GetURLs"
	MultiService_DeleteURLs_FullMethodName = "/grpc.MultiService/DeleteURLs"
	MultiService_BatchSave_FullMethodName  = "/grpc.MultiService/BatchSave"
	MultiService_Stats_FullMethodName      = "/grpc.MultiService/Stats"
)

// MultiServiceClient is the client API for MultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiServiceClient interface {
	SaveURL(ctx context.Context, in *UrlSaveRequest, opts ...grpc.CallOption) (*UrlSaveResponse, error)
	GetURL(ctx context.Context, in *UrlGetRequest, opts ...grpc.CallOption) (*UrlGetResponse, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error)
	GetURLs(ctx context.Context, in *UrlsGetRequest, opts ...grpc.CallOption) (*UrlsGetResponse, error)
	DeleteURLs(ctx context.Context, in *UrlsToDeleteRequest, opts ...grpc.CallOption) (*UrlsToDeleteResponse, error)
	BatchSave(ctx context.Context, in *BatchUrlsRequest, opts ...grpc.CallOption) (*BatchUrlsResponse, error)
	Stats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsResponse, error)
}

type multiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiServiceClient(cc grpc.ClientConnInterface) MultiServiceClient {
	return &multiServiceClient{cc}
}

func (c *multiServiceClient) SaveURL(ctx context.Context, in *UrlSaveRequest, opts ...grpc.CallOption) (*UrlSaveResponse, error) {
	out := new(UrlSaveResponse)
	err := c.cc.Invoke(ctx, MultiService_SaveURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) GetURL(ctx context.Context, in *UrlGetRequest, opts ...grpc.CallOption) (*UrlGetResponse, error) {
	out := new(UrlGetResponse)
	err := c.cc.Invoke(ctx, MultiService_GetURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, MultiService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) GetURLs(ctx context.Context, in *UrlsGetRequest, opts ...grpc.CallOption) (*UrlsGetResponse, error) {
	out := new(UrlsGetResponse)
	err := c.cc.Invoke(ctx, MultiService_GetURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) DeleteURLs(ctx context.Context, in *UrlsToDeleteRequest, opts ...grpc.CallOption) (*UrlsToDeleteResponse, error) {
	out := new(UrlsToDeleteResponse)
	err := c.cc.Invoke(ctx, MultiService_DeleteURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) BatchSave(ctx context.Context, in *BatchUrlsRequest, opts ...grpc.CallOption) (*BatchUrlsResponse, error) {
	out := new(BatchUrlsResponse)
	err := c.cc.Invoke(ctx, MultiService_BatchSave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiServiceClient) Stats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, MultiService_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiServiceServer is the server API for MultiService service.
// All implementations must embed UnimplementedMultiServiceServer
// for forward compatibility
type MultiServiceServer interface {
	SaveURL(context.Context, *UrlSaveRequest) (*UrlSaveResponse, error)
	GetURL(context.Context, *UrlGetRequest) (*UrlGetResponse, error)
	Ping(context.Context, *Empty) (*PingResponse, error)
	GetURLs(context.Context, *UrlsGetRequest) (*UrlsGetResponse, error)
	DeleteURLs(context.Context, *UrlsToDeleteRequest) (*UrlsToDeleteResponse, error)
	BatchSave(context.Context, *BatchUrlsRequest) (*BatchUrlsResponse, error)
	Stats(context.Context, *Empty) (*StatsResponse, error)
	mustEmbedUnimplementedMultiServiceServer()
}

// UnimplementedMultiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiServiceServer struct {
}

func (UnimplementedMultiServiceServer) SaveURL(context.Context, *UrlSaveRequest) (*UrlSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveURL not implemented")
}
func (UnimplementedMultiServiceServer) GetURL(context.Context, *UrlGetRequest) (*UrlGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedMultiServiceServer) Ping(context.Context, *Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMultiServiceServer) GetURLs(context.Context, *UrlsGetRequest) (*UrlsGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLs not implemented")
}
func (UnimplementedMultiServiceServer) DeleteURLs(context.Context, *UrlsToDeleteRequest) (*UrlsToDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedMultiServiceServer) BatchSave(context.Context, *BatchUrlsRequest) (*BatchUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSave not implemented")
}
func (UnimplementedMultiServiceServer) Stats(context.Context, *Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedMultiServiceServer) mustEmbedUnimplementedMultiServiceServer() {}

// UnsafeMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiServiceServer will
// result in compilation errors.
type UnsafeMultiServiceServer interface {
	mustEmbedUnimplementedMultiServiceServer()
}

func RegisterMultiServiceServer(s grpc.ServiceRegistrar, srv MultiServiceServer) {
	s.RegisterService(&MultiService_ServiceDesc, srv)
}

func _MultiService_SaveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).SaveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_SaveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).SaveURL(ctx, req.(*UrlSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).GetURL(ctx, req.(*UrlGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_GetURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).GetURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_GetURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).GetURLs(ctx, req.(*UrlsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_DeleteURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlsToDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).DeleteURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_DeleteURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).DeleteURLs(ctx, req.(*UrlsToDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_BatchSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).BatchSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_BatchSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).BatchSave(ctx, req.(*BatchUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultiService_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiServiceServer).Stats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiService_ServiceDesc is the grpc.ServiceDesc for MultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MultiService",
	HandlerType: (*MultiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveURL",
			Handler:    _MultiService_SaveURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _MultiService_GetURL_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _MultiService_Ping_Handler,
		},
		{
			MethodName: "GetURLs",
			Handler:    _MultiService_GetURLs_Handler,
		},
		{
			MethodName: "DeleteURLs",
			Handler:    _MultiService_DeleteURLs_Handler,
		},
		{
			MethodName: "BatchSave",
			Handler:    _MultiService_BatchSave_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _MultiService_Stats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
