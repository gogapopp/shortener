// Code generated by MockGen. DO NOT EDIT.
// Source: ping.go

// Package mock_ping is a generated GoMock package.
package mock_ping

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBPinger is a mock of DBPinger interface.
type MockDBPinger struct {
	ctrl     *gomock.Controller
	recorder *MockDBPingerMockRecorder
}

// MockDBPingerMockRecorder is the mock recorder for MockDBPinger.
type MockDBPingerMockRecorder struct {
	mock *MockDBPinger
}

// NewMockDBPinger creates a new mock instance.
func NewMockDBPinger(ctrl *gomock.Controller) *MockDBPinger {
	mock := &MockDBPinger{ctrl: ctrl}
	mock.recorder = &MockDBPingerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBPinger) EXPECT() *MockDBPingerMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockDBPinger) Ping() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockDBPingerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBPinger)(nil).Ping))
}
